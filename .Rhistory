#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
)
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}"
)
grep(ip_pattern, ip_addr, value = TRUE) |> na.omit() |> unique()
}
hostname2addr("IMPERIALTOWER")
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
)
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}"
)
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |> na.omit() |> unique()
}
hostname2addr("IMPERIALTOWER")
hostname2addr("IMPERIALTOWER", 6)
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
)
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
)
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |> na.omit() |> unique()
}
hostname2addr("IMPERIALTOWER", 6)
system2("ping", "fe80::3403:fac2:9cd4:6103%11 -n 1")
system2("ping", "fe80::3403:fac2:9cd4:6103%11 -n 1 -4")
system2("ping", "fe80::3403:fac2:9cd4:6103%11 -n 1")
getwd()
getwd() |> dir(pattern = "R$", recursive = TRUE)
getwd() |> dir(pattern = "R$", recursive = TRUE) |> purrr::walk(load)
getwd() |> dir(pattern = "R$", recursive = TRUE) |> purrr::walk(source)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
X$addr <- hostname2addr("IMPERIALTOWER", 6)
X$addr
X$connect(capture = TRUE)
X$addr <- sprintf("[%s]", hostname2addr("IMPERIALTOWER", 6))
X$addr
X$connect(capture = TRUE)
X$addr <- hostname2addr("IMPERIALTOWER")
X$connect(capture = TRUE)
X$history
X$history %$% mget(ls())
hostname2addr("172.22.112.1")
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use (only version 4 is supported by \code{remoter})
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
# Capture the IP address from the ping response:
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
, stderr = TRUE
)
# Parse the IP address from the ping response:
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
)
# Return the IP address:
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |> na.omit() |> unique()
}
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use (only version 4 is supported by \code{remoter})
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
# Capture the IP address from the ping response:
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
, stderr = TRUE
)
# Parse the IP address from the ping response:
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
)
ip_addr <- stringi::stri_extract_first_regex(ip_addr, ip_pattern) |> na.omit() |> unique();
# Return the IP address or NULL if an error occurred:
if (length(ip_addr) == 0){
message("No IP address found for ", addr, ": returning NULL ... ")
return(NULL)
} else {
return(ip_addr)
}
hostname2addr("172.22.112.1")
attributes(.Last.value)
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use (only version 4 is supported by \code{remoter})
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
# Capture the IP address from the ping response:
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
, stderr = TRUE
);
invalid_ip <- !rlang::is_empty(attributes(ip_addr));
# Return NULL if an error occurred:
if (invalid_ip){
message("No IP address found for ", addr, ": returning NULL ... ");
return(NULL);
} else {
# Parse the IP address from the ping response and return the IP address:
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
);
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |>
na.omit() |> unique();
}
hostname2addr("172.22.112.1")
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use (only version 4 is supported by \code{remoter})
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
# Capture the IP address from the ping response:
ip_addr <- suppressWarnings(system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
, stderr = TRUE
));
invalid_ip <- !rlang::is_empty(attributes(ip_addr));
# Return NULL if an error occurred:
if (invalid_ip){
message("No IP address found for ", addr, ": returning NULL ... ");
invisible(NULL);
} else {
# Parse the IP address from the ping response and return the IP address:
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
);
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |>
na.omit() |> unique();
}
hostname2addr("172.22.112.1")
library(remoterUtils)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
detach("package:remoterUtils", unload = TRUE)
getwd() |> dir(pattern = "R$", recursive = TRUE) |> purrr::walk(source)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
X
X$addr
X$addr <- hostname2addr("IMPERIALTOWER")
X$addr
print(X)
X$prompt
X$history
source("C:/Users/sapie/GitHub/remoterUtils/pkg/R/connect_remote.R", echo=TRUE)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
X$addr
X$addr <- hostname2addr("IMPERIALTOWER")
X$addr
print(X)
X$prompt
X$history
X$connect(capture = TRUE)
source("C:/Users/sapie/GitHub/remoterUtils/pkg/R/connect_remote.R", echo=TRUE)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
X$addr
X$addr <- hostname2addr("IMPERIALTOWER")
X$addr
print(X)
X$prompt
X$history
# debug(X$connect)
X$connect(capture = TRUE)
search()
X$connect(action = batch, script="search()", capture = TRUE)
X$history %$% mget(ls())
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
library(remoterUtils)
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
desc::desc_get("depends")
desc::desc_get("depends", "pkg/DESCRIPTION"))
desc::desc_get("depends", "pkg/DESCRIPTION")
desc::desc_get("Depends", "pkg/DESCRIPTION")
desc::desc_get("Imports", "pkg/DESCRIPTION")
desc::desc_get("Imports", "pkg/DESCRIPTION") |>
cat()
desc::desc_get("Imports", "pkg/DESCRIPTION") |>
stringi::stri_split_regex("\t|\n", simplify = TRUE)
desc::desc_get("Imports", "pkg/DESCRIPTION") |>
stringi::stri_split_regex("\t|\n", simplify = TRUE, omit_empty = TRUE)
desc::desc_get("Imports", "pkg/DESCRIPTION") |>
stringi::stri_split_regex("\t|\n", simplify = TRUE, omit_empty = TRUE) |>
as.vector()
desc::desc_get("Imports", "pkg/DESCRIPTION") |>
stringi::stri_split_regex("\t|\n", simplify = TRUE, omit_empty = TRUE) |>
as.vector() |>
trimws()
desc::desc_get("Imports", "pkg/DESCRIPTION") |>
stringi::stri_split_regex("\t|\n|[,]", simplify = TRUE, omit_empty = TRUE) |>
as.vector() |>
trimws()
desc::desc_get("Imports", "pkg/DESCRIPTION") |>
stringi::stri_split_regex("\t|\n|[,]", simplify = TRUE, omit_empty = TRUE) |>
as.vector() |>
trimws() |> (\(x) x[x != ""])()
desc::desc(package = "remoterUtils")
desc::desc(package = "remoterUtils") |> str()
desc::desc(package = "remoterUtils")$get_deps()
getwd()
getwd() |> dirname()
gsub(dirname(), getwd())
gsub(pattern = dirname(), replacement = "", getwd())
gsub(pattern = dirname(getwd()), replacement = "", getwd())
gsub(pattern = paste0(dirname(getwd()), "|[/]"), replacement = "", getwd())
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
# connect_remote(credentials = 'ENV', prompt = "GW2::", session = "GW2")
#
# server_fun ----
# debug(server_fun)
# remoterUtils::server_fun(server_dir = Sys.getenv("remoter_imperialtower"), session = "imperialtower")
#
# pkgdown ----
# usethis::use_pkgdown()
knitr::knit("pkg/README.Rmd", output = "pkg/README.md")
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
# connect_remote(credentials = 'ENV', prompt = "GW2::", session = "GW2")
#
# server_fun ----
# debug(server_fun)
# remoterUtils::server_fun(server_dir = Sys.getenv("remoter_imperialtower"), session = "imperialtower")
#
# pkgdown ----
# usethis::use_pkgdown()
knitr::knit("pkg/README.Rmd", output = "pkg/README.md")
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
text <- desc::desc(package = "remoterUtils")$get_deps() |>
knitr::kable()
text <- glue::glue("## Dependencies\n\n{desc::desc(package = \"remoterUtils\")$get_deps() |>
knitr::kable()")
text <- glue::glue("## Dependencies\n\n{desc::desc(package = \"remoterUtils\")$get_deps() |>
knitr::kable()}")
## Dependencies
pkg <-gsub(pattern = paste0(dirname(getwd()), "|[/]"), replacement = "", getwd())
text <- glue::glue("## Dependencies\n\n{desc::desc(package = pkg)$get_deps() |>
knitr::kable()}")
text
knitr::knit(text = text)
knitr::knit(text = readLines("pkg/README.md") |> paste(text, collapse = ""))
pkg <- gsub(pattern = paste0(dirname(getwd()), "|[/]"), replacement = "", getwd());
text <- glue::glue("## Dependencies\n\n{desc::desc(package = pkg)$get_deps() |>
knitr::kable()}");
knitr::knit(
text = readLines("pkg/README.txt") |> paste(text, collapse = "")
, output = "pkg/README.md"
)
knitr::knit(
text = readLines("pkg/README.txt") |> paste(text, collapse = "\n\n")
, output = "pkg/README.md"
)
readLines("pkg/README.txt") |> paste(text, collapse = "\n\n")
text <- glue::glue("\n\n## Dependencies\n\n{desc::desc(package = pkg)$get_deps() |>
knitr::kable()}");
knitr::knit(
text = readLines("pkg/README.txt") |> paste(text, collapse = "")
, output = "pkg/README.md"
)
text <- glue::glue("\n\n# Dependencies\n\n{desc::desc(package = pkg)$get_deps() |>
knitr::kable()}");
knitr::knit(
text = readLines("pkg/README.txt") |> paste0(text, collapse = "\n\m")
knitr::knit(
text = readLines("pkg/README.txt") |> paste0(text, collapse = "\n\n")
, output = "pkg/README.md"
)
knitr::knit(
text = readLines("pkg/README.txt") |> paste(collapse = "\n") |> paste0(text)
, output = "pkg/README.md"
)
readLines("pkg/README.txt") |> paste(collapse = "\n")
readLines("pkg/README.txt") |> paste(collapse = "\n") |> paste0(text)
text
text <- glue::glue("\n\n# Dependencies\n\n{desc::desc(package = pkg)$get_deps() |>
knitr::kable()}") |> paste(collapse = "\n");
knitr::knit(
text = readLines("pkg/README.txt") |> paste(collapse = "\n") |> paste0(text)
, output = "pkg/README.md"
)
text
knitr::knit(
text = readLines("pkg/README.txt") |> paste(collapse = "\n") |> paste(text, collapse = "")
, output = "pkg/README.md"
)
knitr::knit(
text = readLines("pkg/README.txt") |> paste(collapse = "\n") |> paste(text, collapse = "")
, output = "pkg/README.md"
)
desc::desc(package = pkg)$get_deps() |>
knitr::kable()
text <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg)$get_deps() |>
knitr::kable()
)
text
text <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg)$get_deps() |>
knitr::kable(format = "html")
)
text
text |> htmltools::html_print()
text <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::html()
)
text <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
)
text |> htmltools::html_print()
knitr::knit(
input = "pkg/README.Rmd"
, output = "pkg/README.md"
,envir = globalenv()
);
dep_text <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
)
knitr::knit(
input = "pkg/README.Rmd"
, output = "pkg/README.md"
,envir = globalenv()
);
knitr::knit(
input = "pkg/README.Rmd"
, output = "pkg/README.md"
, envir = globalenv()
);
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
dep_text <- htmltools::tagList(
desc::desc(package = pkg)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
)
knitr::knit(
input = "pkg/README.Rmd"
, output = "pkg/README.md"
, envir = globalenv()
);
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
# usethis::use_pkgdown()
# usethis::use_proprietary_license("Chionesu George")
pkg <- gsub(pattern = paste0(dirname(getwd()), "|[/]"), replacement = "", getwd());
dep_text <- htmltools::tagList(
desc::desc(package = pkg)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
);
if (file.exists("pkg/README.rmd")){
knitr::knit(
input = "pkg/README.rmd"
, output = "pkg/README.md"
, envir = globalenv()
);
}
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
# connect_remote(credentials = 'ENV', prompt = "GW2::", session = "GW2")
#
# server_fun ----
# debug(server_fun)
# remoterUtils::server_fun(server_dir = Sys.getenv("remoter_imperialtower"), session = "imperialtower")
#
# pkgdown ----
# usethis::use_pkgdown()
rstudioapi::navigateToFile("../resources/R/pkgdown_build.R")
# connect_remote(credentials = 'ENV', prompt = "GW2::", session = "GW2")
#
# server_fun ----
# debug(server_fun)
# remoterUtils::server_fun(server_dir = Sys.getenv("remoter_imperialtower"), session = "imperialtower")
#
# pkgdown ----
# usethis::use_pkgdown()
rstudioapi::navigateToFile("../resources/R/pkgdown_build.R")
# connect_remote(credentials = 'ENV', prompt = "GW2::", session = "GW2")
#
# server_fun ----
# debug(server_fun)
# remoterUtils::server_fun(server_dir = Sys.getenv("remoter_imperialtower"), session = "imperialtower")
#
# pkgdown ----
# usethis::use_pkgdown()
rstudioapi::navigateToFile("../resources/R/pkgdown_build.R")
# connect_remote(credentials = 'ENV', prompt = "GW2::", session = "GW2")
#
# server_fun ----
# debug(server_fun)
# remoterUtils::server_fun(server_dir = Sys.getenv("remoter_imperialtower"), session = "imperialtower")
#
source("../resources/R/pkgdown_build.R")
