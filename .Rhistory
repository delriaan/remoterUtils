DESC$get_maintainer()
DESC$get_list()
DESC$get_list(key = "title")
DESC$get_field("Title")
DESC$get_field("Description")
DESC$set(Description = "\code{remoterUtils} provides utility functions facilitating management of \code{remoter} sessions as well as authentication objects (see \code{\link[remoter]{remoter-package}} for \code{remoter} documentation).  Code is designed for use in a Windows environment.")
DESC$set(Description = "\\code{remoterUtils} provides utility functions facilitating management of \\code{remoter} sessions as well as authentication objects (see \\code{\\link[remoter]{remoter-package}} for \\code{remoter} documentation).  Code is designed for use in a Windows environment.")
DESC$set(Description = "Package \\code{remoterUtils} provides utility functions facilitating management of \\code{remoter} sessions as well as authentication objects (see \\code{\\link[remoter]{remoter-package}} for \\code{remoter} documentation).  Code is designed for use in a Windows environment.")
DESC
DESC$write()
DESC$normalize()$write()
DESC <- desc::desc(file = "pkg/DESCRIPTION")
?attach
source("D:/Imperial Git Repos/remoterUtils/pkg/R/make_cipher.R")
library(remoterUtils)
library(remoterUtils)
Sys.getenv(remoter_GW2)
Sys.getenv("remoter_GW2")
#
# connect_remote() ----
remoterUtils::connect_remote(credentials = TRUE, prompt = "IMPERIAL::", session = "imperialtower")
#
# connect_remote() ----
remoterUtils::connect_remote(credentials = TRUE, prompt = "IMPERIAL::", session = "imperialtower")
Sys.getenv("remoter_imperialtower")
Sys.getenv("remoter_GW2")
library(remoterUtils)
library(remoterUtils)
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
install.packages("sodium")
remotes::install_github("RBigData/remoter")
remotes::install_github("wrathematics/argon2")
remotes::install_github("RBigData/remoter")
remotes::install_github("delriaan/remoterUtils", subdir="pkg")
library(remoterUtils)
detach("package:remoterUtils", unload = TRUE)
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
getwd()
library(remoterUtils)
View(server_fun)
x <- list(a = 1, b = 4)
ls(x)
mget("c", envir = x)
mget("c", envir = as.environment(x))
ls(x, pattern = "c")
ls(x, pattern = "a|c")
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
# imperialtower$addr <- "192.168.1.147"
imperialtower$connect(action = "batch", capture = TRUE, script = "cat(Sys.getpid())")
imperialtower$connect(action = "batch", capture = FALSE, script = "cat(Sys.getpid())")
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
# imperialtower$addr <- "192.168.1.147"
imperialtower$connect(action = "batch", capture = TRUE, script = "cat(Sys.getpid())")
imperialtower$connect(action = "batch", capture = FALSE, script = "cat(Sys.getpid())")
imperialtower$result
imperialtower
imperialtower$addr
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
# imperialtower$addr <- "192.168.1.147"
imperialtower$connect(action = "batch", capture = TRUE, script = "cat(Sys.getpid())")
imperialtower$connect(action = "batch", capture = FALSE, script = "cat(Sys.getpid())")
imperialtower$result
imperialtower$addr
imperialtower$password
imperialtower$password |> str()
imperialtower$password |> deparse()
View(imperialtower)
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
# imperialtower$addr <- "192.168.1.147"
imperialtower$connect(action = "batch", capture = TRUE, script = "cat(Sys.getpid())")
imperialtower$connect(action = "batch", capture = FALSE, script = "cat(Sys.getpid())")
imperialtower$result
imperialtower$addr
imperialtower$password
imperialtower$connect
imperialtower$connect()
imperialtower$history
imperialtower$history$hist_2023.12.21.111012_batch
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
# imperialtower$addr <- "192.168.1.147"
imperialtower$connect(action = "batch", capture = TRUE, script = "cat(Sys.getpid())")
imperialtower$connect(action = "batch", capture = FALSE, script = "cat(Sys.getpid())")
imperialtower$result
imperialtower$addr
imperialtower$password
imperialtower$connect()
dir("~")
imperialtower$connect()
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
# imperialtower$addr <- "192.168.1.147"
imperialtower$connect(action = "batch", capture = TRUE, script = "cat(Sys.getpid())")
imperialtower$connect(action = "batch", capture = FALSE, script = "cat(Sys.getpid())")
imperialtower$result
imperialtower$addr
imperialtower$password
imperialtower$connect()
getwd()
imperialtower$connect()
?search
searchpaths()
dir("C:\temp")
dir("C:")
tempdir()
imperialtower$connect()
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
imperialtower$connect()
library(remoterUtils)
search()
library(remoterUtils)
search()
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
imperialtower$connect()
imperialtower$connect()
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
imperialtower$connect()
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
imperialtower$connect()
library(remoterUtils)
detach("package:remoterUtils", unload = TRUE)
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
imperialtower$connect()
?ls
imperialtower$connect()
library(remoterUtils)
# D:\remoter_imperialtower\start.bat action=start session=imperialtower
imperialtower <- remoterUtils::connect_remote$new(prompt = "IMPERIALTOWER", credentials = TRUE);
imperialtower$connect()
library(remoterUtils)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
system2(
command = "ping"
, args = "IMPERIALTOWER -n 1 -4"
, stdout = TRUE
)
system2(
command = "ping"
, args = "IMPERIALTOWER -n 1 -6"
, stdout = TRUE
)
system2(
command = "ping"
, args = "IMPERIALTOWER -n 1 -6"
, stdout = TRUE
) |> stringi::stri_extract_first_regex("([0-9]{1,3}[.]){3}[0-9]{1,3}")
system2(
command = "ping"
, args = "IMPERIALTOWER -n 1 -6"
, stdout = TRUE
) |> stringi::stri_extract_first_regex("([0-9]{1,3}[.]){3}[0-9]{1,3}") |>
na.omit() |> unique()
detach("package:remoterUtils", unload = TRUE)
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
)
stringi::stri_extract_first_regex("([0-9]{1,3}[.]){3}[0-9]{1,3}") |>
na.omit() |> unique()
}
docstring::docstring(hostname2addr)
system2(
command = "ping"
, args = "IMPERIALTOWER -n 1 -6"
, stdout = TRUE
) |> stringi::stri_extract_first_regex("([0-9]{1,3}[.]){3}[0-9]{1,3}") |>
na.omit() |> unique()
system2(
command = "ping"
, args = "IMPERIALTOWER -n 1 -6"
, stdout = TRUE
)
system2(
command = "ping"
, args = "IMPERIALTOWER -n 1 -6"
, stdout = TRUE
) |> stringi::stri_extract_first_regex("fe80[[:alphanum:]:%]+") |>
na.omit() |> unique()
system2(
command = "ping"
, args = "IMPERIALTOWER -n 1 -6"
, stdout = TRUE
) |> stringi::stri_extract_first_regex("fe80[a-z0-9:\\%]+") |>
na.omit() |> unique()
system2(
command = "ping"
, args = "IMPERIALTOWER -n 1 -6"
, stdout = TRUE
) |> stringi::stri_extract_first_regex("fe80[a-z0-9:\\%]+[a-z0-9]") |>
na.omit() |> unique()
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
)
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}"
)
grep(ip_pattern, ip_addr, value = TRUE) |> na.omit() |> unique()
}
hostname2addr("IMPERIALTOWER")
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
)
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}"
)
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |> na.omit() |> unique()
}
hostname2addr("IMPERIALTOWER")
hostname2addr("IMPERIALTOWER", 6)
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
)
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
)
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |> na.omit() |> unique()
}
hostname2addr("IMPERIALTOWER", 6)
system2("ping", "fe80::3403:fac2:9cd4:6103%11 -n 1")
system2("ping", "fe80::3403:fac2:9cd4:6103%11 -n 1 -4")
system2("ping", "fe80::3403:fac2:9cd4:6103%11 -n 1")
getwd()
getwd() |> dir(pattern = "R$", recursive = TRUE)
getwd() |> dir(pattern = "R$", recursive = TRUE) |> purrr::walk(load)
getwd() |> dir(pattern = "R$", recursive = TRUE) |> purrr::walk(source)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
X$addr <- hostname2addr("IMPERIALTOWER", 6)
X$addr
X$connect(capture = TRUE)
X$addr <- sprintf("[%s]", hostname2addr("IMPERIALTOWER", 6))
X$addr
X$connect(capture = TRUE)
X$addr <- hostname2addr("IMPERIALTOWER")
X$connect(capture = TRUE)
X$history
X$history %$% mget(ls())
hostname2addr("172.22.112.1")
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use (only version 4 is supported by \code{remoter})
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
# Capture the IP address from the ping response:
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
, stderr = TRUE
)
# Parse the IP address from the ping response:
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
)
# Return the IP address:
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |> na.omit() |> unique()
}
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use (only version 4 is supported by \code{remoter})
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
# Capture the IP address from the ping response:
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
, stderr = TRUE
)
# Parse the IP address from the ping response:
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
)
ip_addr <- stringi::stri_extract_first_regex(ip_addr, ip_pattern) |> na.omit() |> unique();
# Return the IP address or NULL if an error occurred:
if (length(ip_addr) == 0){
message("No IP address found for ", addr, ": returning NULL ... ")
return(NULL)
} else {
return(ip_addr)
}
hostname2addr("172.22.112.1")
attributes(.Last.value)
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use (only version 4 is supported by \code{remoter})
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
# Capture the IP address from the ping response:
ip_addr <- system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
, stderr = TRUE
);
invalid_ip <- !rlang::is_empty(attributes(ip_addr));
# Return NULL if an error occurred:
if (invalid_ip){
message("No IP address found for ", addr, ": returning NULL ... ");
return(NULL);
} else {
# Parse the IP address from the ping response and return the IP address:
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
);
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |>
na.omit() |> unique();
}
hostname2addr("172.22.112.1")
hostname2addr <- function(addr, ipver = 4){
#' Get the IP Address from a Hostname
#'
#' \code{hostname2addr} pings \code{hostname} and parses the response to get the address.
#'
#' @note Designed for Windows OS
#'
#' @param addr (string) The hostname: if an IP address, the function serves as a form of address accessibility
#' @param ipver (integer | 4) The IP protocol version to use (only version 4 is supported by \code{remoter})
#'
#' @references \href{https://en.wikipedia.org/wiki/IPv6#Address_representation}{IPv6 Addressing (Wikipedia)}
#'
#' @export
# Capture the IP address from the ping response:
ip_addr <- suppressWarnings(system2(
command = "ping"
, args = glue::glue("{addr} -n 1 -{ipver}")
, stdout = TRUE
, stderr = TRUE
));
invalid_ip <- !rlang::is_empty(attributes(ip_addr));
# Return NULL if an error occurred:
if (invalid_ip){
message("No IP address found for ", addr, ": returning NULL ... ");
invisible(NULL);
} else {
# Parse the IP address from the ping response and return the IP address:
ip_pattern <- ifelse(
ipver == 4
, "([0-9]{1,3}[.]){3}[0-9]{1,3}"
, "fe80[a-z0-9:\\%]+[a-z0-9]"
);
stringi::stri_extract_first_regex(ip_addr, ip_pattern) |>
na.omit() |> unique();
}
hostname2addr("172.22.112.1")
library(remoterUtils)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
detach("package:remoterUtils", unload = TRUE)
getwd() |> dir(pattern = "R$", recursive = TRUE) |> purrr::walk(source)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
X
X$addr
X$addr <- hostname2addr("IMPERIALTOWER")
X$addr
print(X)
X$prompt
X$history
source("C:/Users/sapie/GitHub/remoterUtils/pkg/R/connect_remote.R", echo=TRUE)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
X$addr
X$addr <- hostname2addr("IMPERIALTOWER")
X$addr
print(X)
X$prompt
X$history
X$connect(capture = TRUE)
source("C:/Users/sapie/GitHub/remoterUtils/pkg/R/connect_remote.R", echo=TRUE)
#
# connect_remote() ----
# debug(remoterUtils::connect_remote)
X <- connect_remote$new(credentials = TRUE, prompt = "IMPERIALTOWER", session = "imperialtower")
X$addr
X$addr <- hostname2addr("IMPERIALTOWER")
X$addr
print(X)
X$prompt
X$history
# debug(X$connect)
X$connect(capture = TRUE)
search()
X$connect(action = batch, script="search()", capture = TRUE)
X$history %$% mget(ls())
